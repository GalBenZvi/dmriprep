version: 2
jobs:

  build:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      SCRATCH: "/scratch"
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tmp/src/dmriprep
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi

      - run:
          name: Install parallel gzip and python3
          command: |
            apk add --no-cache pigz python3
      - restore_cache:
          keys:
            - docker-v0-{{ .Branch }}-{{ .Revision }}
            - docker-v0-{{ .Branch }}-
            - docker-v0-master-
            - docker-v0-
          paths:
            - /tmp/cache/docker.tar.gz
      - setup_remote_docker
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:2} == "0+" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=nipreps/dmriprep \
                --rm=false \
                -t nipreps/dmriprep:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
            # test if development image should be built
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[build[ _]?devel\]' )" != "" ]]; then
              echo "building development container"
              docker tag nipreps/dmriprep nipreps/dmriprep:unstable
              docker build \
                --rm=false \
                -t nipreps/dmriprep_devel \
                -f Dockerfile_devel .
            fi

      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            docker save ubuntu:xenial-20161213 nipreps/dmriprep:latest \
            | pigz -3 > /tmp/cache/docker.tar.gz
      - save_cache:
         key: docker-v0-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
         paths:
            - /tmp/cache/docker.tar.gz

      - run:
          name: Smoke test Docker image
          command: |
            THISVERSION=$( python3 get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            DOCKERVERSION=$(docker run --rm -it nipreps/dmriprep:latest --version)
            DOCKERVERSION=${DOCKERVERSION%$'\r'}
            DOCKERVERSION=${DOCKERVERSION#*"dmriprep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "DOCKERVERSION: \"${DOCKERVERSION}\""
            test "$DOCKERVERSION" = "$THISVERSION"

      - persist_to_workspace:
          root: /tmp
          paths:
            - src/dmriprep
  get_data:
    machine:
      # Ubuntu 14.04 with Docker 17.10.0-ce
      image: circleci/classic:201711-01
    working_directory: /home/circleci/data
    steps:
      - restore_cache:
          keys:
            - data-v0-{{ .Revision }}
            - data-v0-
      - run:
          name: Get test data from THP002
          command: |
            mkdir -p /tmp/data
            if [[ ! -d /tmp/data/THP002 ]]; then
              wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -q \
                -O THP002_data.tar.gz "https://files.osf.io/v1/resources/8k95s/providers/osfstorage/5d7d89fc9defac0019179fdf"
              tar xvzf THP002_data.tar.gz -C /tmp/data/
            else
              echo "Dataset THP002 was cached"
            fi 
      - run:
          name: Get FreeSurfer derivatives for THP002
          command: |
            if [[ ! -d /tmp/THP002/derivatives/freesurfer ]]; then
              mkdir -p /tmp/THP002/derivatives
              wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -q \
                -O THP002_derivatives_freesurfer.tar.gz "https://files.osf.io/v1/resources/8k95s/providers/osfstorage/5d7d87ce7483ec0017530cc9"
              tar xvzf THP002_derivatives_freesurfer.tar.gz -C /tmp/THP002/derivatives
            else
              echo "FreeSurfer derivatives of THP002 were cached"
            fi
      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/fslicense
            cd /tmp/fslicense
            echo "cHJpbnRmICJrcnp5c3p0b2YuZ29yZ29sZXdza2lAZ21haWwuY29tXG41MTcyXG4gKkN2dW12RVYzelRmZ1xuRlM1Si8yYzFhZ2c0RVxuIiA+IGxpY2Vuc2UudHh0Cg==" | base64 -d | sh
      - run:
          name: Create Nipype config files
          command: |
            mkdir -p /tmp/config
            printf "[execution]\nstop_on_first_crash = true\n" > /tmp/config/nipype.cfg
            echo "poll_sleep_duration = 0.01" >> /tmp/config/nipype.cfg
            echo "hash_method = content" >> /tmp/config/nipype.cfg
      - persist_to_workspace:
          root: /tmp
          paths:
            - fslicense
            - config/nipype.cfg
      - save_cache:
         key: data-v0-{{ .Revision }}-{{ epoch }}
         paths:
            - /tmp/data
            - /tmp/THP002/derivatives/freesurfer

  THP002:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/THP002
    environment:
      - FS_LICENSE: /tmp/fslicense/license.txt
    steps:
      - checkout:
          path: /home/circleci/src/dmriprep
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/dmriprep
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?THP002\]' )" != "" ]]; then
              echo "Skipping THP002 build"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - docker-v0-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          keys:
            - data-v0-{{ .Revision }}
      - restore_cache:
          keys:
            - THP002-anat-v00-{{ .Branch }}-{{ .Revision }}
            - THP002-anat-v00-{{ .Branch }}
            - THP002-anat-v00-master
            - THP002-anat-v00-
      - run:
          name: Setting up test
          command: |
            mkdir -p /tmp/THP002/derivatives && sudo setfacl -d -m group:$(id -gn):rwx /tmp/THP002/derivatives && sudo setfacl -m group:$(id -gn):rwx /tmp/THP002/derivatives
            pip install --upgrade pip setuptools
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Run anatomical workflow on THP002
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/THP002/work /tmp/THP002/derivatives
            sudo setfacl -d -m group:$(id -gn):rwx /tmp/THP002/derivatives && \
                sudo setfacl -m group:$(id -gn):rwx /tmp/THP002/derivatives
            sudo setfacl -d -m group:$(id -gn):rwx /tmp/THP002/work && \
                sudo setfacl -m group:$(id -gn):rwx /tmp/THP002/work
            docker run -e FS_LICENSE=$FS_LICENSE --rm=false \
                -v /tmp/data/THP002:/data \
                -v /tmp/THP002/derivatives:/out \
                -v /tmp/fslicense/license.txt:/tmp/fslicense/license.txt:ro \
                -v /tmp/THP002/work:/work \
                --user $(id -u):$(id -g) \
                nipreps/dmriprep:latest /data /out participant --anat-only --notrack --skip-bids-validation -w /work
      - run:
          name: Clean-up after anatomical run
          command: |
            rm -rf /tmp/THP002/work/dmriprep_wf/fsdir*
            rm -rf /tmp/THP002/work/reportlets
            rm -rf /tmp/THP002/derivatives/dmriprep
          when: on_success
      - save_cache:
         key: THP002-anat-v00-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
         paths:
            - /tmp/THP002/work
      - run:
          name: Clean working directory
          when: on_success
          command: |
            sudo chown $(id -un):$(id -gn) -R /tmp/THP002
            sudo rm -rf /tmp/THP002/work
            sudo rm -rf /tmp/THP002/work_partial
      - store_artifacts:
          path: /tmp/THP002


  deploy_docker_patches:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/dmriprep
    steps:

      - restore_cache:
          keys:
            - docker-v0-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag nipreps/dmriprep nipreps/dmriprep:${CIRCLE_BRANCH#docker/}
              docker push nipreps/dmriprep:${CIRCLE_BRANCH#docker/}
            fi

  deploy_docker:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/dmriprep
    steps:
      - run:
          name: Check whether image should be deployed to Docker Hub
          command: |
            if [[ "$CIRCLE_PROJECT_USERNAME" != "nipreps" ]]; then
              echo "Nothing to deploy for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME."
              circleci step halt
            fi
      - checkout:
          path: /home/circleci/src/dmriprep
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/dmriprep
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - docker-v0-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag nipreps/dmriprep nipreps/dmriprep:unstable
              docker push nipreps/dmriprep:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push nipreps/dmriprep:latest
                docker tag nipreps/dmriprep nipreps/dmriprep:$CIRCLE_TAG
                docker push nipreps/dmriprep:$CIRCLE_TAG
              fi
            fi

  test_deploy_pypi:
    docker:
      - image: circleci/python:3.7.4
    working_directory: /tmp/src/dmriprep
    steps:
      - checkout
      - run:
          name: Start virtual environment
          command: |
            python -m venv /tmp/sdist
            source /tmp/sdist/bin/activate
            python -m pip install -U pip
            python -m pip install "setuptools>=30.3.0" twine
      - run:
          name: Build dMRIPrep
          command: |
            source /tmp/sdist/bin/activate
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            echo "${CIRCLE_TAG:-$THISVERSION}" > dmriprep/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - store_artifacts:
          path: /tmp/src/dmriprep/dist
      - run:
          name: Check sdist distribution
          command: |
            source /tmp/sdist/bin/activate
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/dmriprep*.tar.gz
            pip install dist/dmriprep*.tar.gz
            which dmriprep | grep sdist\\/bin
            INSTALLED_VERSION=$(dmriprep --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"dmriprep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Check wheel distribution
          command: |
            python -m venv /tmp/wheel
            source /tmp/wheel/bin/activate
            python -m pip install -U pip
            python -m pip install "setuptools>=30.3.0" twine
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/dmriprep*.whl
            pip install dist/dmriprep*.whl
            which dmriprep | grep wheel\\/bin
            INSTALLED_VERSION=$(dmriprep --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"dmriprep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - store_artifacts:
          path: /tmp/src/dmriprep/dist

  deploy_pypi:
    docker:
      - image: circleci/python:3.7.4
    working_directory: /tmp/src/dmriprep
    steps:
      - checkout
      - run:
          name: Start virtual environment
          command: |
            python -m venv /tmp/sdist
            source /tmp/sdist/bin/activate
            python -m pip install -U pip
            python -m pip install "setuptools>=30.3.0" twine
      - run:
          name: Build dMRIPrep
          command: |
            source /tmp/sdist/bin/activate
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            echo "${CIRCLE_TAG:-$THISVERSION}" > dmriprep/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - run:
          name: Upload packages to PyPI
          command: |
            source /tmp/sdist/bin/activate
            twine upload dist/dmriprep*

  deployable:
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - THP002:
          requires:
            - build
            - get_data 
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/
      - test_deploy_pypi:
          filters:
            branches:
              ignore:
                - /docs\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - deploy_docker_patches:
          requires:
            - build
          filters:
            branches:
              only: /docker\/.*/

      - deployable:
          requires:
            - build
            - test_deploy_pypi
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_docker:
          requires:
            - deployable
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_pypi:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
